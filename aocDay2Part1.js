// For the latest Axiom VirtualNetwork+ scripting documentation, 
// please visit: http://www.zachtronics.com/virtualnetwork/
// noinspection DuplicatedCode

function getTitle() {
    return "Day 2.1 : Rock Paper Scissors";
}

function getSubtitle() {
    return "Advent of Code 2022";
}

function getDescription() {
    return ""
        + "Find the problem description here https://adventofcode.com/2022/day/2\n"
        + "Since the result is in range [0, 15000], you are expected to output 'result - 9000'. (so '13279' becomes '4279')\n"
        + "File 200 contains the Encoded Strategy Guide. Create a new file in your host that stores your score after all rounds.\n"
        + "Score is based on the outcome (Win = 6, Draw = 3, Lose = 0), and your shape (Rock = 1, Paper = 2, Scissors = 3)."
        ;
}

let currentTestRun = -1;
let strategyGuide = null;
let expectedResult = null;

function initializeTestRun(testRun) {
    let recompute = currentTestRun !== testRun;
    currentTestRun = testRun;

    let beachHost = createHost("Beach", 5, -1, 5, 5);
    let pathHost = createHost("path", 12, 1, 8, 1);
    let tents = [
        createHost("Tent1", 12, 4, 1, 2),
        createHost("Tent2", 14, 4, 1, 2),
        createHost("Tent3", 16, 4, 1, 2),
        createHost("Tent4", 18, 4, 1, 2),
        createHost("Tent5", 12, -3, 1, 2),
        createHost("Tent6", 14, -3, 1, 2),
        createHost("Tent7", 16, -3, 1, 2),
        createHost("Tent8", 18, -3, 1, 2),
    ]
    createLink(beachHost, 800, pathHost, -1);
    for (let tentID in tents) {
        createLink(pathHost, 801 + parseInt(tentID), tents[tentID], -1);
    }

    let symARegister = createRegister(beachHost, 6, 3, "SymA");
    let symBRegister = createRegister(beachHost, 7, 3, "SymB");
    let symCRegister = createRegister(beachHost, 8, 3, "SymC");

    let symXRegister = createRegister(beachHost, 6, -1, "SymX");
    let symYRegister = createRegister(beachHost, 7, -1, "SymY");
    let symZRegister = createRegister(beachHost, 8, -1, "SymZ");

    setRegisterReadCallback(symARegister, function () { return "A"; });
    setRegisterReadCallback(symBRegister, function () { return "B"; });
    setRegisterReadCallback(symCRegister, function () { return "C"; });

    setRegisterReadCallback(symXRegister, function () { return "X"; });
    setRegisterReadCallback(symYRegister, function () { return "Y"; });
    setRegisterReadCallback(symZRegister, function () { return "Z"; });

    if (recompute) {
        strategyGuide = getStrategyGuide(testRun);
        expectedResult = getExpectedResult(strategyGuide) - 9000;
    }

    let strategyGuideFile = createNormalFile(getPlayerHost(), 200, FILE_ICON_DATA, strategyGuide);
    setFileColumnCount(strategyGuideFile, 2);
    if (testRun > 2) {
        setFileInitiallyCollapsed(strategyGuideFile);
    }

    requireCreateFile(getPlayerHost(), [expectedResult], "Create a new File with your final score offset by -9000.");
}

function onCycleFinished() {
}

const sampleCases1 = "AYBXCZ";
const sampleCases2 = "BXAZAYBXCZBYBXCXAYBYBYCYBYCYBXAZCYBZCXAYBYBYBYBYBXBYCYBYBYBYAYBXAYAYBXBZBYCYAYAZCYAZCZCYBZCXAZCYBXBXCZCYBYAXCZBYBXAZBZCYCZBXBYBYCYBYBYCYBZAYBYCYBYBYBYCYBXCXCYBXBXCXBYCZBYBYBYCYBXAZCYAZBXBXAYCXBZBYBXCXCXBXAZAYAZBXBXBYCYCZBYAYCYAZAXAYBXBYCYBYBZCXBYBZCYCYCZBYCYBYCYAZAZAZBYBYCZBYCYBXBXAYBXBXCYCZBYAZAYCYBXCZCYBYBYAZBYBYBXBZAZCYAZCZBYBYAXBXAZBYCZAYBYAZCXCYBYBYBYCZBXCZBYCYCYBYCYCZBYCZBYBYBYAYAYBXCZBYBZCYBZCYBYBXBYCYCZBYAYBXCZCYBXBYBYCZCZAZBXBXCZBYBYBYBYAYBYBYBXBZAYBXCYBYBXBYBYCYAYAYAZBYBYCYCYCYAZBZBZBZBYBXBXBYBYAZBYCYBXBXBYBXAZCYCYCYCXAZBYAZBXBXBYCYBXCYAXBYAYBYAXAXAZBXBYBXBXAZBXBXCYCYBYBZBYAYBZCZCYBZBYBXCZBYBYBYCXAZBYBYAXCZBYCXBYBZBZAZCYBYBYCYBYBYCYBYCYAZCYBZCZBZCYBXCYBXBYBYCYCYCZBXBYBZBYBXBYBYBYAYCYCYAYBYAYBYCXBZBYCYAZCYCXBYBYBYBXCZCXBYBYAZAXBYBXCYBXBYBXAZAYCYBXBYCZAYAZBYBZCYBYCZCYBYAYCXAYBYAZBXBYAYBZBZBYBYBXCYCYCYBXBYCZCXBYAZAYBXBXCZCYAZCXBYCZBXBYBXCXBYBYBXBYBZCYBYBYBZCZCZBYCYCYBYCXBYCYBXAYCXCXCYBYBYAXBXBYBXBYCYCXCYBXBXAZCYBYCZCYBYCYCZCZCYAZCZBYBYAYBYCYBYBYBYCYAYBYBXAYBYBYCYBYBXAZBYBYCZBZCZCYAYCYBYBYBYBZCZCZCYAZBYBYBYBZBYCYBYBZAZAZCZAZAYBYBYBYBYAZAYBXCZBYBZCXBXAYCYBXBYBXBYAZBYAYBYCYBYBYBYAZAYAYBYBYCXAZBYCYCYAYBYAXBZBYAZBXBYBYCYCYBYAZBYCZCYAYBZCYCXCYAXBYBYBYCZBXCYBXBYBYCYCYAZBYCYCZCYBZCYBXBXBYCZBYBYBXBYBYAYAZBYAZBYBYAZBXAZAYBYBXAZBZCZBYBYBZBXCZCYBYCYBYBXBYBXCYCYBXAYCYBXBYCYBYAZCYBXAZBYBYAZCYBYCXCZCYBZBYBXCZBZAZBYCXCYBXBYCYCYBYBYBYBXBYBYBXCYBXBYCZCYCYBZAZCYCYCYCYBYCXBXCXBYCYBZBXCYBYBXBYCYCYCXAYCYCYAZAZBYAZAZCZBXCYBYBXBYBYCYBXBXBYCYBYBZAYBYAYCYAZBYBYAZAXBYBYBXBYCYCYCYBYAXBYCYCZAYBXCYAYBYAYBZCYCYCZBYCYCYBYCZCYAYBYBYAYCXBXBYBXBYBYBYAZAYBYBYBXCYCYBYBYCZBYBYBXBXBYCZBZBXBYAYCXAZBXBYCZBXCYAZAXBXCYBYBXBZBYBYCXBXAZCYCYCZBXBXAYAYBYCYBYCYBYBXAYBXBZAYCZAYAXCZBYBYCYCYBYBYAYCYBYBZBXAZCYBXBXAYBYCYCYBYBYCXCYCZAYBYBXBYBYCXCYCYBYBYAZBYBYBYCYAYBXBYBXCYBYBYBYBXAZBYBYCYBZCYBXCXCYBYAZBYBXAYBYBXBXBYBYBYAZBYCZBXAYCXCXBYBXBYBYBYCZAYAZCYBYBYBYCYBXBYBYBYBZBZAYAYAYBYCYCYBXCYBYAYBYCYCYBYBYBXAYBYBYAZBYCZAZAZCZBYBXBYBYBZAYCYAYBXBYCYBYCYAYAZAZAYCZCXAYAYBYBXAYBYBYBZAYBYBXBZBYCYCXBYCZBYBYAZBYCYAZBYAXCXAZAYAYBYAYCYBYBYCYBYCYBYAYBXCZCXAYAYBYBZCXBYAYCZBYCZAXCYAZBXCYBYCYBYBXAYBYBXBYBZBZCYBZBXBXAYBYBYAYCYAZCXCZBZCXCXBXCYBXBXAYBZAYAZBXBZBXCYBYBYCXBXCZBXBZBYAXCYCYBYBYAZCYBZBXBYAZAYCZAYCYBYCYCYBYCYCXBYCXBYCZBYBYBXAXAYCYCYBZCYBXBZBYCXBYCZCYBYCYBYAYCYCXAZAYBXCZCYBYAYCYAZCYBXBXAYCXBYBYAXBYBYCYAZCYBYBYCZCYCYCYCXBZAZCYBYCXCYBYBYBYCYBXBXBZBYBXAXBZBYBXBYBYCYBYCZBYBZBZCYAYCYAYBZBYCYBYBYCYBXBYBYBXBZBYAYBYCYBXCZBYCZBYBYAYBYCYCYBYCYBYBYCYCYAYAZAZCXBYAYCYBXAZBXAYCYCYBYCZCXBZBYBYAZAZAZCYBXAYAYBYBYBYBYBXAYAYBYCZCYAYCYAXBYAYBYCXBYBXBYCZBYAZCXBZCYBYAYAYBZBYBYBYBXAZAYBYCXAXAZCXCYBYBYAYCYBYAYCYAYCYBYCYBYBYAZBZAYAYBXBYAYCZAZAYCYBYCYBZBXCZBYBYBYCYBYBYAYAXBYCZBYBYBYBYCYCYBYBZBYCYAYBYCYAZAYCZAXBYBYAXBYBYBYBYBYBZCYCZCZBYAYBZAZAYCZBXAXBYCZBXBYBYCYAZBYAZBXBZAZCYCZBYCYBYBXBXBYAYAZCZBXBYCZCYBYCZAYCYAZBYBYBYBXAYBYCXBZBYCZBXCZCYAZCYCXCZBYBXCYBYCYBZAYBYCZCXBXBYBZCZAYCZBYBXAXCYBXAZAYCYCYBYCYBXBZCYBYCYAXAYCXCYBXCYAZCXCYBXBYAYAYBYBZBZAZBYBYBYCYBXAYCZAYCYBYBYBYBZCYBYAYAZBXAZBXBYBXCYBXBXAZBYCZBXAZBXBYBYCXCYBYCYBYCYBYAZCYCYBYCZBXAYAZCYAXAYAYCYCXBXBYBXBYBYCZBZBYCYCZAZBYAYCYBXBYCZCYBYCYAYCZBYBXAZBYCYBXBZAZBYAXAYBZCZCYCYBYBXBYBXBYCYBYBXCZCYAZCXBXCYBZBYAZBXBYBXBXCYBYBYAZCYBYBYCYAYBXCYAZAZAXBYCXBYBYCYCZAYCYBYBYBYBXBZCYBYBXBYBYBYCYBYCXBYBXAZBYCYAZAZBZAYBYCZAXAZBXBXCYAYBYAZCZBYBXBXBZBYCYBYBYCZAZBZBZBYCYBYBXAYBXCZBZBYCYBYCYCZBYAXBYCYCZBYAYBXBYCZBYCYBYBYCYBXBYCYCYAZCYBYCZCXBXBYBYBYBYAZCYAYCYCYCYBYCYBYAYCYBXCXCYAYCYBXAZAZCYCYBXBYCYBYBXBYBXCXAYBYBYBXBXCXCYBYBYBYBYBZBXAZBYCYBXBXAYAZBYCYCZCYAYBYBZBYBXCYBZBXCXBYCYBYBYBYBYAYBYCYCYBXCYBYCYAYBZCYAYBYCYBZBYBZBXBXBXBXBYBZCYCYBYBXCYAYAZBXBYBYCYBXBXCYCZBYBYCYCYCXBYCZAYAZBYCYAYCYAYCXBYCYCZBYCZBXBXBYBYCYAYBXAZBYBYBYBXBYCXCYAYBYBXAZAYBYBYBYCXCYBYBYBYCZBYBYBXBYAYAZAYBYBYAYBYBYAYBYAZBZBYCYBYBYAYBYBYBYBXCYBYCYCYBZBXBYAZBYAYCYAZCZBXBYBXBXCYBYBYBYBYAZCXBYBYCYAYAYAYBZAYBYAZCYBYBYCXCXCYBXAZBXBXBYCYAZCYBYCYBZCYAYBYBYCZBZCYAYBXCYBYAZBZBXBYBYAZAZBYBYBYBZAYAZBYCYCYBYAZAZCYCYBYAZBYAYCYAYBYAYCYBZBYBXBYCYCYCYBXAYAYAZBYBYBYCYBXBYBZBYAZBYBXBXBYBYCYAZAYBYBYBYCZBYBYBYCYBYBYCYCZAXBYBYCYBYCXBZBXCXBYBXBXBYCZBXBYCZCYBYCYBYBYAYBXCYBYAYAXAZBZBZAYBXBYCZCYCXCYAYBYBXAYCYCYCYBYBYBZBXBZBYCYAYBYBXBYCZCYBYBZCYCYCYCXBYBYCYAYBXBYCYAZCXBYAZCZBYCYAZBYBZAYBYBXBYCZAYCXBYCYBZAZBYBYBYBZAYCYAYAZBXBXBYBYBXBZBYBYCZBXCZCZBXBYBXCYBYCZBYCYCYBXCYAZCZBYBXBYAZBXBZCZCYCYCXCYBZAZAZCYAZBYBYBXBXBXCYBYBYAXCXBYBXBXBZCYCYCYCYCXCYAXAYCYCYBYBXBYBXAYAXCYCZBYCYCZBZCXBYCXBYCYBXCYCYCYCYCYCYBYCYCYBXCYBYBYBYAYBYBYBYBXBZBYBYCZAYBYBYBXBYCYCXBXAYBYAZBYAYBYBYAZBZBYBXBYAYCZCZBYBYAZCYCXBYBYBYBZCYCYAYAYCYBYAZBYBZCYBYBXCYCYBYCYAYBYCZCYCYBYCYAYCXAYCYAZBYCYBYAZBYBXBYCYBYBXBZCXBZAZBZAZCYAYBYBYCYBXBYAYBXBYBYAYAZAYBYBYCYBYBYCYBYBYCXAZBXBYBYAXAYAZAXBYBYBYAYCYAYCZBXAZCYAXBYCYBXCZBXBYCYAZAXCXBXBYBYAYBYCYCYCZBYBYCYCZBYAZAZCXBYCYCZCYBXCZBXBYCXBYCYAZAZBXBZAXAZCXAZBZBYCYBXBYBZBYBXBYCXBYBXBYCYCXBZBYCXCXBXBYBXBYBYBYBYBXBYAZBYAYBYAYBYAYCYBYCYCYCYCYCYCYAZAZBXCXCZBYCXAZCZCYBZBYBZBYAZBXBYBXCYBYBXAYBYBYBZBXCXBYBYCYCYBYCYCXAXCXCYBYBYBYBZBYBZBYBXAZCZCYCYAYBXBYCZAYAYBYBXAZBYBYAYCYAZCYBZBYBYCYCZBYBYCYCYBZBZAYCYAZBZBYBYBXBYAZAYAZBYBXCXCYCZBYBYBYAYCYBYCYCYBY";

function getStrategyGuide(testRun) {
    if (testRun === 1) {
        return sampleCases1.split('');
    } else if (testRun === 2) {
        return sampleCases2.split('');
    }

    const charSet = ["A", "B", "C", "X", "Y", "Z"];
    let numRounds = randomInt(200, 1200);
    let data = [];
    for (let i = 0; i < numRounds; i++) {
        let val = randomInt(0, 99)
        data.push((val % 10) % 3);
        data.push((((val / 10) | 0) % 3) + 3);
    }
    return data.map(function (x) { return charSet[x]; });
}

function getExpectedResult(data) {
    let dataPairs = [];
    for (let i = 0; i < (data.length - 1); i += 2) {
        dataPairs.push([data[i], data[i + 1]]);
    }

    //   R | P | S
    // R .
    // P     .
    // S         .
    // index with [myHand][otherHand]
    const scoreMap = [
        [3, 0, 6],
        [6, 3, 0],
        [0, 6, 3],
    ]

    const abcToIndex = function (symbol) {
        return symbol.charCodeAt(0) - "B".charCodeAt(0) + 1;
    }

    const xyzToIndex = function (symbol) {
        return symbol.charCodeAt(0) - "Y".charCodeAt(0) + 1;
    }

    return dataPairs
        .map(function (pair) {
            let handScore = xyzToIndex(pair[1]) + 1;
            return handScore + scoreMap[xyzToIndex(pair[1])][abcToIndex(pair[0])];
        })
        .reduce(sum, 0);
}

function sum(a, b) {
    return a + b;
}
